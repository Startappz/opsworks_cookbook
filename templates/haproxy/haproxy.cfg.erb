global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
        ssl-default-bind-ciphers ECDH+AESGCM:ECDH+CHACHA20:ECDH+AES256:ECDH+AES128:!aNULL:!SHA1
        ssl-default-bind-options no-sslv3

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

<% if !(node[:haproxy][:auth].nil? || node[:haproxy][:auth].empty?)  -%>
userlist UsersFor_WP
    user "<%= node[:haproxy][:auth][:user] %>" insecure-password "<%= node[:haproxy][:auth][:password] %>"
<% end %>

#:::haproxy
resolvers myresolver
    nameserver vpc <%= node[:haproxy][:resolver] %>
    resolve_retries       30
    timeout retry         1s
    hold valid           10s

listen stats # Define a listen section called "stats"
    bind *:<%= node[:haproxy][:stats][:port] %>
    mode http
    stats enable  # Enable stats page
    stats hide-version  # Hide HAProxy version
    stats realm Haproxy\ Statistics  # Title text for popup window
    stats uri /<%= node[:haproxy][:stats][:url] %>  # Stats URI
    stats auth <%= node[:haproxy][:stats][:user] %>:<%= node[:haproxy][:stats][:password] %>  # Authentication credentials

listen status-monitor
    bind            *:<%= node[:haproxy][:monit][:port] %>
    monitor-uri     /

# frontend http-in
#     bind *:80
#     reqadd X-Forwarded-Proto:\ http

#     # IP Blacklisting
#     acl is-blacklisted-ip src -f /etc/haproxy/blacklisted.ips
#     http-request deny if is-blacklisted-ip
    
#     <% if (node[:haproxy][:ssl_enabled]) -%>
#     redirect scheme https code 301 if !{ ssl_fc }
#     <% else  -%>
#     <% if !(node[:haproxy][:auth].nil? || node[:haproxy][:auth].empty?)  -%>
#     acl auth_ok http_auth(UsersFor_WP)
#     <% end %>
#     <% if !(node[:haproxy][:redirects].nil? || node[:haproxy][:redirects].empty?)  -%>
#     <% node[:haproxy][:redirects].each do |key, value| %>
#     http-request redirect scheme https code 301 drop-query append-slash if { path -m str /<%= key %> }
#     acl redirect_<%= key %> path_beg /<%= key %>/
#     http-request redirect location <%= value %> if redirect_<%= key %>
#     <% end %>
#     <% end %>
#     <% if node[:haproxy][:protection] == 'all' -%>
#     <% if !(node[:haproxy][:allowed_pass].nil? || node[:haproxy][:allowed_pass].empty?)  -%>
#     <% node[:haproxy][:allowed_pass].each do |value| %>
#     acl allowed_pass path_beg <%= value %>
#     <% end %>
#     http-request auth if !allowed_pass !auth_ok
#     <% end %>
#     <% end %>
#     <% restricted_list = "" %>
#     <% if !(node[:haproxy][:restricted_page].nil? || node[:haproxy][:restricted_page].empty?)  -%>
#     <% node[:haproxy][:restricted_page].each do |key, value| %>
#     acl restricted_page_<%= key %> path_beg -i <%= value %>
#     <% restricted_list += "restricted_page_" + key + " "  %>
#     <% end %>
#     <% end %>
#     acl restricted_default_html path_beg,url_dec -i /default.html
#     http-request deny if restricted_default_html <%= restricted_list %>


#     http-request add-header X-CLIENT-IP %[src]

#     <% if !(node[:haproxy][:reverse_proxy].nil? || node[:haproxy][:reverse_proxy].empty?)  -%>
#     <% node[:haproxy][:reverse_proxy].each do |key, value| %>
#     <% if (value['force_slash'])  -%>
#     http-request redirect scheme https code 301 drop-query append-slash if { path -m str /<%= value['slug'] %> }
#     <% end -%>
#     acl prefixed-with-<%= key %>  path_beg /<%= value['slug'] %>/
#     use_backend <%= key %> if prefixed-with-<%= key %>
#     <% end %>
#     <% end %>
#     default_backend application-backend
#     <% end %>
    
# <% if (node[:haproxy][:ssl_enabled]) -%>
frontend https-in
    #bind *:443 ssl crt /etc/haproxy/ssl/<%= @cert %>.pem
    bind *:80
    #reqadd X-Forwarded-Proto:\ https  
    reqadd X-Forwarded-Proto:\ http

    # IP Blacklisting
    acl is-blacklisted-ip src -f /etc/haproxy/blacklisted.ips
    http-request deny if is-blacklisted-ip

    <% if !(node[:haproxy][:auth].nil? || node[:haproxy][:auth].empty?)  -%>
    acl auth_ok http_auth(UsersFor_WP)
    <% end %>
    <% if !(node[:haproxy][:redirects].nil? || node[:haproxy][:redirects].empty?)  -%>
    <% node[:haproxy][:redirects].each do |key, value| %>
    http-request redirect scheme https code 301 drop-query append-slash if { path -m str /<%= key %> }
    acl redirect_<%= key %> path_beg /<%= key %>/
    http-request redirect location /<%= value %>/ if redirect_<%= key %>
    <% end %>
    <% end %>
    <% if node[:haproxy][:protection] == 'all' -%>
    <% if !(node[:haproxy][:allowed_pass].nil? || node[:haproxy][:allowed_pass].empty?)  -%>
    <% node[:haproxy][:allowed_pass].each do |value| %>
    acl allowed_pass path_beg <%= value %>
    <% end %>
    http-request auth if !allowed_pass !auth_ok
    <% end %>
    <% end %>
    <% restricted_list = "" %>
    <% if !(node[:haproxy][:restricted_page].nil? || node[:haproxy][:restricted_page].empty?)  -%>
    <% node[:haproxy][:restricted_page].each do |key, value| %>
    acl restricted_page_<%= key %> path_beg -i <%= value %>
    <% restricted_list += "restricted_page_" + key + " "  %>
    <% end %>
    <% end %>
    acl restricted_default_html path_beg,url_dec -i /default.html
    http-request deny if restricted_default_html <%= restricted_list %>


    http-request add-header X-CLIENT-IP %[src]

    <% if !(node[:haproxy][:reverse_proxy].nil? || node[:haproxy][:reverse_proxy].empty?)  -%>
    <% node[:haproxy][:reverse_proxy].each do |key, value| %>
    <% if (value['force_slash'])  -%>
    http-request redirect scheme https code 301 drop-query append-slash if { path -m str /<%= value['slug'] %> }
    <% end -%>
    acl prefixed-with-<%= key %>  path_beg /<%= value['slug'] %>/
    use_backend <%= key %> if prefixed-with-<%= key %>
    <% end %>
    <% end %>

    default_backend application-backend
# <% end %>

backend application-backend
    #<% if (node[:haproxy][:ssl_enabled]) -%>
    #redirect scheme https if !{ ssl_fc }
    #<% end %>
    balance leastconn
    option httpclose
    option forwardfor
    cookie JSESSIONID prefix
    #enter the IP of your application here
    option httpchk GET /<%= node[:haproxy][:heath_check] %>
    default-server inter <%= node[:haproxy][:inter] %> fall <%= node[:haproxy][:fall] %>
    server node1 <%= @backend_host %>:<%= @backend_port %> check resolvers myresolver #cookie A check-ssl verify none

<% if !(node[:haproxy][:reverse_proxy].nil? || node[:haproxy][:reverse_proxy].empty?)  -%>
<% node[:haproxy][:reverse_proxy].each do |key, value| %>
backend <%= key %>
    <% if value[:require_auth] -%>
    acl auth_ok http_auth(UsersFor_WP)
    http-request auth if !auth_ok
    <% end -%>
    http-request set-header Host <%= value['host'] %>
    server node1 <%= value['host'] %>:80
    <% if value[:headers] -%>
    <% value[:headers].each do |keyHeader, valueHeader| %>
    http-response set-header <%= keyHeader %> "<%= valueHeader %>"
    <% end %>
    <% end -%>
    # Map url path as ProxyPass does
    <% if (value['path'].nil?)  -%>
    <% if (value['force_slash'])  -%>
    reqirep  ^(GET|POST|HEAD)\ /<%= value['slug'] %>/(.*)     \1\ /\2
    <% else  -%>
    reqirep  ^(GET|POST|HEAD)\ /<%= value['slug'] %>(.*)     \1\ /\2
    <% end -%>
    <% end -%>
    # Rewrite redirects as ProxyPassReverse does
    acl response-is-redirect res.hdr(Location) -m found
    <% if (value['force_slash'])  -%>
        rspirep ^Location:\ (http|https)://<%= value['host'] %><%= value['path'] %>\/(.*)   Location:\ \1://<%= node[:haproxy][:hostname] %>/<%= value['slug'] %>/\2  if response-is-redirect
    <% else  -%>
        rspirep ^Location:\ (http|https)://<%= value['host'] %><%= value['path'] %>\/(.*)   Location:\ \1://<%= node[:haproxy][:hostname] %>/<%= value['slug'] %>\2  if response-is-redirect
    <% end -%>
    #option forwardfor  
<% end %>
<% end %>

  
